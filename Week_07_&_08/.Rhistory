#### CREATE RAW DATA ----
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./R Projects/data.stroop")
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./R Projects/data.stroop",file)))
}
df <- rbind(df, read.csv(paste0("./data.stroop",file)))
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
# take only the columns we need
df <- df |>
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
) |>
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
acc        = as.numeric(acc),
rt         = as.numeric(rt)
) |>
select(subject, block, trial, task, congruency, participant_response, correct_response, acc, rt)
summary(df)
# R course for beginners
# Week 7
# Assignment by Maayan Sacher, ID 302308283
#Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
# take only the columns we need
df <- df |>
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
) |>
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
acc        = as.numeric(acc),
rt         = as.numeric(rt)
) |>
select(subject, block, trial, task, congruency, participant_response, correct_response, acc, rt)
summary(df)
#check factors
contrasts(df$task)<-c(1,0)
contrasts(df$task)
contrasts(df$congruency)
save(df, file = "./data/raw_data.rdata")
dir()
dir(.)
dir(".")
dir("./data.stroop")
save(df, file = "raw_data.rdata")
save(df, file = "./data/raw_data.rdata")
save(df, file = "raw_data.rdata")
#### CREATE FILTERD DATA ----
load("./data/raw_data.rdata")
# R course for beginners
# Week 7
# Assignment by Maayan Sacher, ID 302308283
#Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
# take only the columns we need
df <- df |>
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"),
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
) |>
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
acc        = as.numeric(acc),
rt         = as.numeric(rt)
) |>
select(subject, block, trial, task, congruency, participant_response, correct_response, acc, rt)
summary(df)
#check factors
contrasts(df$task)<-c(1,0)
contrasts(df$task)
contrasts(df$congruency)
save(df, file = "raw_data.rdata")
#### CREATE FILTERD DATA ----
load("raw_data.rdata")
cat("Number of unique subjects:", length(unique(df$subject)))
# Remove NA
df <- df |> filter(!is.na(rt))
# Remove RT outliers (below 300 or above 3000)
df <- df |> filter(rt >= 300 & rt <= 3000)
#check the percentage of remaining trials
df |>  group_by(subject) |> summarise(percentage = 1 - (n() / 400)) |>  print(n = Inf)
save(df, file = "filtered_data.rdata")
view(df)
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
view(df)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
rm(list = ls())
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
view(df)
# R course for beginners
# Week 7
# Assignment by Maayan Sacher, ID 302308283
#Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
rm(list = ls())
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
view(df)
# R course for beginners
# Week 7
# Assignment by Maayan Sacher, ID 302308283
#Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
rm(list = ls())
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
view(df)
# R course for beginners
# Week 7
# Assignment by Maayan Sacher, ID 302308283
#Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
rm(list = ls())
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
View(df)
}
View(df)
# take only the columns we need
df <- df |>
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"), #if the condition column includes teh in_naming, create a task with ink_naming and if not than have it be word reading
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
) |>
View(df)
# R course for beginners
# Week 7
# Assignment by Maayan Sacher, ID 302308283
#Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
rm(list = ls())
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
# take only the columns we need
df <- df |>
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"), #if the condition column includes teh in_naming, create a task with ink_naming and if not than have it be word reading
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
) |>
View(df)
df <- df |>
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"), #if the condition column includes teh in_naming, create a task with ink_naming and if not than have it be word reading
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
) |>
View(df)
# R course for beginners
# Week 7
# Assignment by Maayan Sacher, ID 302308283
#Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
rm(list = ls())
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
# take only the columns we need
df <- df |>
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"), #if the condition column includes teh in_naming, create a task with ink_naming and if not than have it be word reading
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
)
View(df)
select(subject, block, trial, task, congruency, participant_response, correct_response, acc, rt)
# R course for beginners
# Week 7
# Assignment by Maayan Sacher, ID 302308283
#Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
rm(list = ls())
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
# take only the columns we need
df <- df |>
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"), #if the condition column includes teh in_naming, create a task with ink_naming and if not than have it be word reading
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
) |>
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
acc        = as.numeric(acc),
rt         = as.numeric(rt)
) |>
select(subject, block, trial, task, congruency, participant_response, correct_response, acc, rt)
View(df)
summary(df)
#check factors
contrasts(df$task)<-c(1,0)
contrasts(df$task)
contrasts(df$congruency)
# R course for beginners
# Week 7
# Assignment by Maayan Sacher, ID 302308283
#Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
rm(list = ls())
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
# take only the columns we need
df <- df |>
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"), #if the condition column includes teh in_naming, create a task with ink_naming and if not than have it be word reading
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
) |>
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
acc        = as.numeric(acc),
rt         = as.numeric(rt)
) |>
select(subject, block, trial, task, congruency, participant_response, correct_response, acc, rt)
summary(df)
#check factors
contrasts(df$task)<-c(1,0)
contrasts(df$task)
contrasts(df$congruency)
save(df, file = "raw_data.rdata")
#### CREATE FILTERD DATA ----
load("raw_data.rdata")
cat("Number of unique subjects:", length(unique(df$subject)))
# Remove NA
df <- df |> filter(!is.na(rt))
# Remove RT outliers (below 300 or above 3000)
df <- df |> filter(rt >= 300 & rt <= 3000)
#check the percentage of remaining trials
df |>  group_by(subject) |> summarise(percentage = 1 - (n() / 400)) |>  print(n = Inf)
save(df, file = "filtered_data.rdata")
View(df)
View(df)
#### CREATE FILTERD DATA ----
load("raw_data.rdata")
cat("Number of unique subjects:", length(unique(df$subject)))
# Remove NA
df <- df |> filter(!is.na(rt))
# Remove RT outliers (below 300 or above 3000)
df <- df |> filter(rt >= 300 & rt <= 3000)
#check the percentage of remaining trials
df |>  group_by(subject) |> summarise(percentage = 1 - (n() / 400)) |>  print(n = Inf)
save(df, file = "filtered_data.rdata")
View(df)
#check the percentage of remaining trials
df |>  group_by(subject) |> summarise(percentage = 1 - (n() / 400))*100 |>  print(n = Inf)
df |>  group_by(subject) |> summarise(percentage = 100 * (1 - (n() / 400))) |>  print(n = Inf)
#### CREATE FILTERD DATA ----
load("raw_data.rdata")
cat("Number of unique subjects:", length(unique(df$subject)))
# Remove NA
df <- df |> filter(!is.na(rt))
# Remove RT outliers (below 300 or above 3000)
df <- df |> filter(rt >= 300 & rt <= 3000)
#check the percentage of remaining trials
df |>  group_by(subject) |> summarise(percentage = 100 * (1 - (n() / 400))) |>  print(n = Inf)
save(df, file = "filtered_data.rdata")
load("filtered_data.rdata")
library(ggplot2)
print(summary_descriptive_stat)
summary_descriptive_stat <- df |>
group_by(confruency) |>
summarise(
mean_rt = mean(rt),
sd_rt = sd(rt)
)
load("filtered_data.rdata")
library(ggplot2)
#average and sd by condition
summary_descriptive_stat <- df |>
group_by(confruency) |>
summarise(
mean_rt = mean(rt),
sd_rt = sd(rt)
)
#average and sd by condition
summary_descriptive_stat <- df |>
group_by(congruancy) |>
summarise(
mean_rt = mean(rt),
sd_rt = sd(rt)
)
#average and sd by condition
summary_descriptive_stat <- df |>
group_by(congruency) |>
summarise(
mean_rt = mean(rt),
sd_rt = sd(rt)
)
print(summary_descriptive_stat)
ggplot(data = summary_descriptive_stat, aes(x = congruency, y = mean_rt)) +
geom_bar(stat = "identity", fill = "orange") +
geom_errorbar(aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt)) +
labs(
title = "Average Response Time of Congruent v. Incongruent Responses",
ylab = "Average Response Time",
xlab = "Condition"
) +
theme_classic()
ggplot(data = summary_descriptive_stat, aes(x = congruency, y = mean_rt)) +
geom_bar(stat = "identity", fill = "orange") +
geom_errorbar(aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt)) +
labs(
title = "Average Response Time of Congruent v. Incongruent Responses",
y = "Average Response Time",
x = "Condition"
) +
theme_classic()
save(df, file = "GraphicRepResults.rdata")
save(file = "GraphicRepResults.rdata")
# R course for beginners
# Week 7
# Assignment by Maayan Sacher, ID 302308283
#Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
#Ctrl + L to clear the console.
#### CREATE RAW DATA ----
rm(list = ls())
install.packages(dplyr)
library(dplyr)
# combine files to one df
files_names = dir("./data.stroop")
df = data.frame()
for (file in files_names) {
df <- rbind(df, read.csv(paste0("./data.stroop/",file)))
}
# take only the columns we need
df <- df |>
mutate(
task       = ifelse(grepl("ink_naming", condition), "ink_naming", "word_reading"), #if the condition column includes teh in_naming, create a task with ink_naming and if not than have it be word reading
congruency = ifelse(grepl("incong", condition), "incongruent", "congruent"),
acc        = ifelse(participant_response == correct_response, 1, 0)
) |>
mutate(
subject    = as.factor(subject),
task       = as.factor(task),
congruency = as.factor(congruency),
block      = as.numeric(block),
trial      = as.numeric(trial),
acc        = as.numeric(acc),
rt         = as.numeric(rt)
) |>
select(subject, block, trial, task, congruency, participant_response, correct_response, acc, rt)
summary(df)
#check factors
contrasts(df$task)<-c(1,0)
contrasts(df$task)
contrasts(df$congruency)
save(df, file = "raw_data.rdata")
#### CREATE FILTERD DATA ----
load("raw_data.rdata")
cat("Number of unique subjects:", length(unique(df$subject)))
# Remove NA
df <- df |> filter(!is.na(rt))
# Remove RT outliers (below 300 or above 3000)
df <- df |> filter(rt >= 300 & rt <= 3000)
#check the percentage of remaining trials
df |>  group_by(subject) |> summarise(percentage = 100 * (1 - (n() / 400))) |>  print(n = Inf)
save(df, file = "filtered_data.rdata")
load("filtered_data.rdata")
library(ggplot2)
#average and sd by condition
summary_descriptive_stat <- df |>
group_by(congruency) |>
summarise(
mean_rt = mean(rt),
sd_rt = sd(rt)
)
print(summary_descriptive_stat)
ggplot(data = summary_descriptive_stat, aes(x = congruency, y = mean_rt)) +
geom_bar(stat = "identity", fill = "orange") +
geom_errorbar(aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt)) +
labs(
title = "Average Response Time of Congruent v. Incongruent Responses",
y = "Average Response Time",
x = "Condition"
) +
theme_classic()
